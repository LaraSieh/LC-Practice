# Word break

Given a string s and a dictionary of words dict, add spaces in s to construct a sentence where each word is a valid dictionary word. 

Return all such possible sentences. 

For example, given
s = "catsanddog",
dict = ["cat", "cats", "and", "sand", "dog"]. 

A solution is ["cats and dog", "cat sand dog"]. 

// copied from discussion
class Solution {
public:
    vector<string> wordBreak(string s, unordered_set<string>wordDict) {
        int n = s.size();
        vector<bool> dp(n+1, false);
        dp[0] = true;
        for(int i=1; i <= n; ++i) {
            for(int j=i-1; j >= 0; --j) {
                if(dp[j] && wordDict.find(s.substr(j, i-j)) != wordDict.end()) {
                    dp[i] = true;
                    break;
                }
            }
        }
        if(!dp[s.size()]) return {};

        vector<string> ret;
        wordBreak(s, 0, wordDict, dp, "", ret);
        return ret;
    }
    
    void wordBreak(const string &s, int begin, unordered_set<string> &wordDict, vector<bool> &dp, string str, vector<string> &ret)
    {
        if(begin == s.size())
        {
            ret.push_back(str.substr(0, str.size() - 1));  //eliminate the last space
            return;
        }

        for(int i=begin + 1; i <= s.size(); ++i)
         //We only go further for certain cases
            if(dp[i] && wordDict.find(s.substr(begin, i - begin)) != wordDict.end()) 
                wordBreak(s, i, wordDict, dp, str + s.substr(begin, i - begin) + " ", ret);
    }
};





// This solution should be correct but time exceeds on some cases, for example, "aaaaaaa....", "a", "aa", "aaa" ...
struct TrieNode {
    TrieNode() : isWord(false) { memset(children,0,sizeof(TrieNode*)*26);}
    
    bool     isWord;
    TrieNode *children[26];
};

class Trie {
public:
    Trie() { root = new TrieNode();}
    
    void AddWord(string word) {
        TrieNode *cur = root;
        for (auto c : word) {
            int index = (int)(c - 'a');
            if (cur->children[index] == nullptr) {
                cur->children[index] = new TrieNode();
            }
            cur = cur->children[index];
        }
        cur->isWord = true;
    }
    
    bool Lookup(string word) {
        TrieNode *cur = root;
        for (auto c : word) {
            int index = (int)(c - 'a');
            if (cur->children[index] == nullptr) {
                return false;
            }
            cur = cur->children[index];
        }
        return cur->isWord;
    }
    
    bool StartWith(string word) {
        TrieNode *cur = root;
        for (auto c : word) {
            int index = (int)(c - 'a');
            if (cur->children[index] == nullptr) return false;
            cur = cur->children[index];
        }
        return true;
    }
    
private:
    TrieNode *root;
}; 


class Solution {
public:
    void BreakWords(string s, string& cur, vector<string>& ret) {
        for (int i=1; i<=s.size(); ++i) {
            string sub = s.substr(0,i);
            if (trie.Lookup(sub)) {
                cur += sub;
                if (i==s.size()) {
                    ret.push_back(cur);
                } else {
                    cur += ' ';
                    BreakWords(s.substr(i),cur,ret);
                }
            }
        }
        
        cur = "";
        return;
    }
    

    vector<string> wordBreak(string s, unordered_set<string>& wordDict) {
        vector<string> ret;
        
        // build dictionary
        for (auto it=wordDict.begin(); it!=wordDict.end(); ++it) {
            trie.AddWord(*it);
        }
        
        string cur;
        BreakWords(s, cur, ret);
        
        return ret;
    }
    
private:
    Trie trie;
};
