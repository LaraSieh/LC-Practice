
// Find the Duplicate Number
 
// Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), 
// prove that at least one duplicate number must exist. Assume that there is only one duplicate number,
// find the duplicate one. 

//Note:

//1.You must not modify the array (assume the array is read only).
//2.You must use only constant, O(1) extra space.
//3.Your runtime complexity should be less than O(n2).
//4.There is only one duplicate number in the array, but it could be repeated more than once.
 




public:
    int findDuplicate(vector<int>& nums) {
        if (nums.size() == 0) return 0;
        
        int first =0, second = 0;
        first = nums[first];
        second = nums[nums[second]];
        while (first != second) {
            first = nums[first];
            second = nums[nums[second]];
        }
        second = 0;
        while (first != second) {
            first = nums[first];
            second = nums[second];
        }
        return first;
    }
    
