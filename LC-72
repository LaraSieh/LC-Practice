// Edit distance
// Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. 
// (each operation is counted as 1 step.) 

// You have the following 3 operations permitted on a word: 
//  a) Insert a character
//  b) Delete a character
//  c) Replace a character

// analysis: 
// Putting these together, we now have: 
// 1.dp[i][0] = i;
// 2.dp[0][j] = j;
// 3.dp[i][j] = dp[i - 1][j - 1], if word1[i - 1] = word2[j - 1];
// 4.dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1])+1 
//                   replace          delete         insert

class Solution {
public:
    int minDistance(string word1, string word2) {
        //DP: dp[i][j] shortest distance from word1[0...(i-1)] to word2[0...(j-1)]
        size_t l1 = word1.size();
        size_t l2 = word2.size();
        
        int dp[l1+1][l2+1];
        dp[0][0] = 0;
        for (int i=1; i<l1+1; ++i) dp[i][0]=i;
        for (int j=1; j<l2+1; ++j) dp[0][j]=j;
        
        for (size_t i=1; i < l1+1; ++i) {
            for (size_t j=1; j<l2+1; ++j) {
                if (word1[i-1] == word2[j-1]) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = min(min(dp[i-1][j],dp[i][j-1]),dp[i-1][j-1])+1;
                }
            }
        }
        
        return dp[l1][l2];
    }
};

