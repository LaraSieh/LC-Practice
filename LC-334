334. Increasing Triplet Subsequence
Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:
Return true if there exists i, j, k 
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Your algorithm should run in O(n) time complexity and O(1) space complexity.

Examples:
Given [1, 2, 3, 4, 5],
return true.

Given [5, 4, 3, 2, 1],
return false.

// My 8ms solution
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        int n=nums.size();
        
        int first=0, cur=1,compare=0,smaller=0,count=1;
        while(cur < n) {
            if (nums[cur]>nums[compare]) {
                ++count;
                if (count == 3) return true;
                first = compare;
                compare = cur;
            } else if (count == 2) {
                if (smaller>compare && nums[cur]>nums[smaller]) {
                    first = smaller;
                    compare = cur;
                } else if (nums[cur]>nums[first])
                    compare = cur;
                else
                    smaller = cur;
            } else {
                compare = cur;
            }
            ++cur;
        }
        return false;
    }
};

// clean one copied from discussion
if(nums.size()<3) return false;
    vector<int>inc;
    for(int i=0;i<nums.size();i++)
    {
        if(inc.size()>=3) return true;//important
        int ind=lower_bound(inc.begin(),inc.end(),nums[i])-inc.begin();
        if(ind==inc.size())inc.push_back(nums[i]);
        else inc[ind]=nums[i];
    }
    return inc.size()>=3;
