//LRU Cache
//Design and implement a data structure for Least Recently Used (LRU) cache. 
//It should support the following operations: get and set. 
// get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
// set(key, value) - Set or insert the value if the key is not already present. 
// When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. 



class LRUCache{

public:
    LRUCache(int capacity) : maxCapacity(capacity) {}
    
    int get(int key) {
        auto iter = cacheMap.find(key);
        if (iter == cacheMap.end()) //key doesn't exist
            return -1;
        cacheList.splice(cacheList.begin(), cacheList, iter->second); //move the node corresponding to key to front
        return iter->second->second;                               //return value of the node
    }
    
    void set(int key, int value) {
        auto iter = cacheMap.find(key);
        if (iter != cacheMap.end()) //key exists
        {
            cacheList.splice(cacheList.begin(), cacheList, iter->second); //move the node corresponding to key to front
            iter->second->second = value;                        //update value of the node
            return;
        }
        if (cacheMap.size() == maxCapacity) //reached capacity
        {
           int key_to_del = cacheList.back().first; 
           cacheList.pop_back();            //remove node in list;
           cacheMap.erase(key_to_del);      //remove key in map
        }
        cacheList.emplace_front(key, value);  //create new node in list
        cacheMap[key] = cacheList.begin();       //create correspondence between key and node
    }

private:
    int maxCapacity;
    unordered_map<int,  list<pair<int, int>>::iterator> cacheMap;
    list<pair<int, int>> cacheList;                               
};

================================================
class LRUCache{
public:

    struct DLinkItem {
        int  key;
        int  val;
        DLinkItem *next;
        DLinkItem *prev;
        DLinkItem(int k, int v) : key(k),val(v),next(nullptr),prev(nullptr) {}
        DLinkItem *Prev() {return prev;}
        DLinkItem *Next() {return next;};
    };
    
    struct DLink {
        DLinkItem *head;  // have a dummy head for easy operations
//        DLinkItem *tail;
        int numItems;
    
        DLink() : numItems(0) {head = new DLinkItem(0,0);}    
        int Numbers() {return numItems;}
        DLinkItem *Head() {return head;}
        void Remove(DLinkItem *item) {
            if (item->next)
                item->next->prev = item->prev;
            item->prev->next = item->next;
            if (head->prev == item) {
                head->prev = item->prev;
            }
            
            --numItems;
        }
        void AddHead(DLinkItem *item) {
            item->prev = head;
            item->next = head->next;
            head->next = item;
            ++numItems;
        }
    };
    
    
    LRUCache(int capacity) : maxCapacity(capacity) {}
    
    int get(int key) {
        DLinkItem *item = cacheMap[key];
        if (item == nullptr) {
            cout << "not found" << endl;
            return -1;
        }
        
        cacheList.Remove(item);
        cacheList.AddHead(item);
        cout << "f  " << item->val << endl;
        return item->val;
    }
    
    void set(int key, int value) {
        DLinkItem *item = cacheMap[key];
        if (item == nullptr) {
            item = new DLinkItem(key, value);
            cacheMap[key] = item;
            if (cacheList.Numbers() == maxCapacity) {
                //remove tail
                cacheMap.erase(cacheList.Head()->Prev());
                //cout << "head: " << head->key << " " << head->val << endl;
                //cout << "tail: " << tail->key << " " << tail->val << endl;
                cacheList.Remove(cacheList.Head()->Prev());
            }
            
            cacheMap[key] = item;
        } else { 
            // take off the item and put it to head
            cacheList.Remove(item);
            item->val = value;
        }
        // insert item on the front of the list
        cacheList.AddHead(item);
    }
    
private:
    int        maxCapacity;
    DLink      cacheList;
    map<int, DLinkItem*> cacheMap;
};

============================

public:

struct DLinkItem {
        int key;
        int val;
        DLinkItem *prev;
        DLinkItem *next;
        DLinkItem(int k, int v) : key(k), val(v), prev(nullptr), next(nullptr) {}
    };
    
    LRUCache(int capacity) : maxCapacity(capacity),numItems(0),head(nullptr),tail(nullptr) {
    }
    
    int get(int key) {
        DLinkItem *item = cacheMap[key];
        if (item != nullptr) {
            // item touched, need to append to tail to update LRU list
            if (item != tail) {
                if (item != head) { //if item is not head, item->prev can't be nullptr
                    if (item->prev)
                        item->prev->next = item->next;
                } else if (item->next) { // item is head and not a single item in list
                    head = item->next; 
                }
                tail->next = item;
                item->prev = tail;
                item->next = nullptr;
                tail = item;
            }
          //  cout << "f..." << key << "  " << item->val << endl;
            return item->val;
        }
//        cout <<"no f..." << endl;
        return -1;
    }
    
    void set(int key, int value) {
        DLinkItem *item = cacheMap[key];

        if (item == nullptr) {
            if (numItems == maxCapacity) {
                DLinkItem *h = head;
                cacheMap.erase(head->key);
                cout << "erase "  << head->key << endl;
                head = head->next;
                if (head)
                    head->prev = nullptr;
                delete h;
                --numItems;
            }
            item = new DLinkItem(key,value);
            cacheMap[key] = item;
            ++numItems;
        } 
        if (item->val != value) {
            item->val = value;
        }
        
        if (head == nullptr) {
            head = item;
            tail = item;
        } else if (item != tail) {
            if (item != head) { 
                // two situations here
                // 1. item is an old item, so if it is not head, its prev is not null 
                if (item->prev) {
                    item->prev->next = item->next;
                } //else { // it is a new item
                  //item->prev = tail;
                //}
            } else if (item->next) { // item is head and not a single item in list
                head = item->next; 
            }
            tail->next = item;
            item->prev = tail;
            item->next = nullptr;
            tail = item;
        }
  //      cout << "num " << numItems << endl;
    }
    
private:
    int maxCapacity;
    int numItems;
    DLinkItem *head;
    DLinkItem *tail;
    map<int,DLinkItem*> cacheMap;
};
