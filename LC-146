//LRU Cache
//Design and implement a data structure for Least Recently Used (LRU) cache. 
//It should support the following operations: get and set. 
// get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
// set(key, value) - Set or insert the value if the key is not already present. 
// When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. 

=======================================
// My solution: from bottom up
class LRUCache{

public:

struct DListEntry {
    int key;
    int val;
    DListEntry *prev;
    DListEntry *next;
    DListEntry(int k,int v) : key(k),val(v),prev(nullptr),next(nullptr) {}
    
    void SetValue(int v) {val = v;}
    int  Key() {return key;}
    int  Value() {return val;}
};

struct DList {
    int        numEntries;
    DListEntry *head;
    DListEntry *tail;
    
    DList() : numEntries(0) {
        // have an always exisiting head and tail to save if/else code
        head = new DListEntry(-1,-1);  //dummy head
        tail = new DListEntry(-1,-1);  //dummy tail
        head->next = tail; 
        tail->prev = head;
    }
    
    ~DList() {delete head; delete tail;}
    
    int Numbers() {return numEntries;}
    
    void InsertHead(DListEntry *e) { //move entry e to head
        head->next->prev = e;
        e->next = head->next;
        e->prev = head;
        head->next = e;
        ++numEntries;
    }
    
    void RemoveEntry(DListEntry *e) {
        e->prev->next = e->next;
        e->next->prev = e->prev;
        --numEntries;
    }
    
    DListEntry * RemoveTail() {
        DListEntry * e = tail->prev;
        RemoveEntry(e); //this has to be used when capacity reaches maxCapacity
                                 // so we don't check if it is an empty list for now
        return e;
    }
};


    LRUCache(int capacity) : maxCapacity(capacity) {}
    
    int get(int key) {
        DListEntry *e = cacheMap[key];
        if (e == nullptr) {
            return -1;
        }
        cacheList.RemoveEntry(e);
        cacheList.InsertHead(e);
        return e->Value();
    }
    
    void set(int key, int value) {
        DListEntry *entry = cacheMap[key];
        if (entry) { // key is in list
            cacheList.RemoveEntry(entry);
            cacheList.InsertHead(entry);
            entry->SetValue(value);
            return;
        }
        if (cacheList.Numbers() == maxCapacity) {
            DListEntry *e = cacheList.RemoveTail();
            cacheMap.erase(e->Key());
            delete e;
        }
        entry = new DListEntry(key, value);
        cacheList.InsertHead(entry);
        cacheMap[key] = entry;
    }
    
private:
    int maxCapacity;
    DList cacheList;
    map<int, DListEntry *> cacheMap;
}


=============================================================
// copy from others,  using exisiting list structure

class LRUCache{

public:
    LRUCache(int capacity) : maxCapacity(capacity) {}
    
    int get(int key) {
        auto iter = cacheMap.find(key);
        if (iter == cacheMap.end()) //key doesn't exist
            return -1;
        cacheList.splice(cacheList.begin(), cacheList, iter->second); //move the node corresponding to key to front
        return iter->second->second;                               //return value of the node
    }
    
    void set(int key, int value) {
        auto iter = cacheMap.find(key);
        if (iter != cacheMap.end()) //key exists
        {
            cacheList.splice(cacheList.begin(), cacheList, iter->second); //move the node corresponding to key to front
            iter->second->second = value;                        //update value of the node
            return;
        }
        if (cacheMap.size() == maxCapacity) //reached capacity
        {
           int key_to_del = cacheList.back().first; 
           cacheList.pop_back();            //remove node in list;
           cacheMap.erase(key_to_del);      //remove key in map
        }
        cacheList.emplace_front(key, value);  //create new node in list
        cacheMap[key] = cacheList.begin();       //create correspondence between key and node
    }

private:
    int maxCapacity;
    unordered_map<int,  list<pair<int, int>>::iterator> cacheMap;
    list<pair<int, int>> cacheList;                               
};
