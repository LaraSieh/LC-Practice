//Trapping Rain Water
//Given n non-negative integers representing an elevation map where the width of each bar is 1, 
//compute how much water it is able to trap after raining. 

//For example, 
// Given [0,1,0,2,1,0,1,3,2,1,2,1], return 6. 

class Solution {
public:
    int trap(vector<int>& height) {
        int water=0, level=0;  // lower is the lower one between left and right
        int l=0, r=height.size()-1;
        
        while(l<r) {
            int lower = height[l] < height[r] ? l++ : r--;
            level = max(level, height[lower]);
            water += level - height[lower];
        }
        
        return water;
        
/*   My slow but clear method:)
        size_t len = height.size();
        
        vector<int> left, right;
        
        left.push_back(0);
        right.push_back(0);
        for (size_t i=1; i<len; ++i) {
            left.push_back(max(left[i-1], height[i-1]));
            right.push_back(max(right[i-1], height[len-i]));
        }
        
        int water=0;
        for (size_t i=0; i<len; ++i) {
            int t = min(left[i],right[len-1-i]);
            if (t>height[i]) {
                water += t-height[i];
            }
        }
        
        return water;
*/
    }

};


