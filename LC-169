169. Majority Element
Given an array of size n, find the majority element. The majority element is the element that appears more than ⌊ n/2 ⌋ times.

You may assume that the array is non-empty and the majority element always exist in the array.


// Using sort, 40ms
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        int n = nums.size();
        
        int counts=1;
        for (int i=1; i<n; ++i) {
            if (nums[i-1]==nums[i]) {
                ++counts;
                if (counts+counts>n) return nums[i];
            } else {
                counts = 1;
            }
        }
        
        return nums[n-1];
    }
};

// using map, 48ms
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        unordered_map<int,int> m;
        int n = nums.size();
        
        for (auto num : nums) {
            ++m[num];
            if (m[num] + m[num] > n)
                return num;
        }
        
        return nums[n-1];
    }
};

// Moore's majority vote algorithm, 16ms
// https://en.wikipedia.org/wiki/Boyer–Moore_majority_vote_algorithm
// Assumption: the array is non-empty and the majority element always exist in the array
class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int count=0,candidate=nums[0];
        int n = nums.size();
        
        for (int num : nums) {
            if (count == 0) {
                candidate = num;
                count = 1;
            } else if (num == candidate) {
                ++count;
            } else {
                --count;
            }
        }
        return candidate;
    }
};
