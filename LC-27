27. Remove Element
 Given an array and a value, remove all instances of that value in place and return the new length. 

The order of elements can be changed. It doesn't matter what you leave beyond the new length. 


// My solution, 8ms not fast enough
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int write=nums.size();
        
        for (int i=0; i<nums.size(); ++i) {
            if (nums[i]!=val && write<i) {
                nums[write++] = nums[i];
            } else if (nums[i]==val && write>i) {
                write = i;
            }
        }
        return write;
    }
};

// 4ms solution
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int len = nums.size();
        
        while (len>0 && nums[len-1] == val) {
            --len;
        }
        
        //first non val is @nums[len-1] back counting
        for (int i=len-2;i>=0;--i) {
            if (nums[i] == val) {
               nums[i] = nums[len-1];
               --len;
            } 
        }
        return len;
    }
};

// my 4ms solution
class Solution {
public:
    int removeElement(vector<int>& nums, int val) {
        int n=nums.size(), write=0;
        
        while (write<n && nums[write] != val) ++write;
        for (int i=write; i<n; ++i) {
            if (nums[i]!=val)
                nums[write++] = nums[i];
        }
        return write;
    }
};
