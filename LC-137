# Single number 2

Given an array of integers, every element appears three times except for one. Find that single one. 

Note:
 Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory? 


// slow but direct solution
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res=0, mask = 1, intBits = sizeof(int)*8;
        int bits[intBits] = {0};
     
        for (int i=0; i < nums.size(); ++i)
        {
            mask = 1;
            for (int j=0; j < intBits; ++j)
            {
                bits[j] += (nums[i] & mask) >> j;
                mask <<= 1;
            }
        }
     
        for (int j=0; j < intBits; ++j)
        {
            res |= (bits[j] % 3) << j; 
        }
     
        return res;
    }
};

// very efficient way, copied from discussion
class Solution {

    public:
    int singleNumber(vector<int>& nums) {
        //we need to implement a tree-time counter(base 3) that if a bit appears three time ,it will be zero.
        //#curent  income  ouput
        //# ab      c/c       ab/ab
        //# 00      1/0       01/00
        //# 01      1/0       10/01
        //# 10      1/0       00/10
        // a=~abc+a~b~c;
        // b=~a~bc+~ab~c;
        int a=0;
        int b=0;
        for(int c:nums){
            int ta=(~a&b&c)|(a&~b&~c);
            b=(~a&~b&c)|(~a&b&~c);
            a=ta;
        }
        //we need find the number that is 01,10 => 1, 00 => 0.
        return a|b;

    }
};

