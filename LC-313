# Super Ugly Number
//Write a program to find the nth super ugly number. 
// Super ugly numbers are positive numbers whose all prime factors are in the given prime list primes of size k. For example, 
// [1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32]  is the sequence of the first 12 super ugly numbers 
// given primes = [2, 7, 13, 19] of size 4. 

Note:
 (1) 1 is a super ugly number for any given primes.
 (2) The given numbers in primes are in ascending order.
 (3) 0 < k ≤ 100, 0 < n ≤ 106, 0 < primes[i] < 1000. 


// 120 ms
class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        int k=primes.size();
        vector<int> ugly(1,1);
        vector<int> index(k,0);
        
        while (ugly.size() < n) {
            int next=INT_MAX;
            for (int i=0;i<k;++i) {
                next = min(next, primes[i]*ugly[index[i]]);
            }
            ugly.push_back(next);
            for (int i=0;i<k;++i) {
                if (next == primes[i]*ugly[index[i]]) 
                    ++index[i];
            }
        }
        return ugly.back();
    }
};

//76 ms
class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        int k=primes.size();
        vector<int> ugly(1,1);
        vector<int> index(k,0);
        vector<int> vals(primes);
        
        while (ugly.size() < n) {
            int next=INT_MAX;
            for (int i=0;i<k;++i) {
                next = min(next,vals[i]);
            }
            ugly.push_back(next);
            for (int i=0;i<k;++i) {
                if (next == vals[i]) { 
                    ++index[i];
                    vals[i] = ugly[index[i]]*primes[i];
                }
            }
        }
        return ugly.back();
    }
};

// version copied from discussion

class Solution {
public:
    int nthSuperUglyNumber(int n, vector<int>& primes) {
        int nPrimes = primes.size();
        vector<int> index(nPrimes,0);
        vector<int> products(1,1);
        
        while (products.size() < n) {
            vector<int> multiple(nPrimes,0);
            int mul = INT_MAX;
            
            for (int i=0; i<nPrimes; ++i) {
                multiple[i] = products[index[i]] * primes[i];
                mul = min(multiple[i], mul);
            }
            for (int i=0; i<nPrimes; ++i) {
                if (mul == multiple[i])
                    ++ index[i];
            }
            products.push_back(mul);
        } 
        
        return products.back();
    }
};
