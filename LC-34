// 34. Search for a Range

Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> output(2,-1);
        auto low = lower_bound(nums.begin(),nums.end(),target);
        auto up =  upper_bound(nums.begin(),nums.end(),target);
        
        if ((low!=nums.end() || up!=nums.begin()) && nums[low-nums.begin()]==target) {
            output[0] = low - nums.begin();
            output[1] = up - nums.begin()-1;
        }
        return output;
    }
};


class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int len = nums.size();
        if (len<1) return {-1,-1};
    
        vector<int> range;
        
        int l=0, r=len-1;
        while (l < r) {
            int mid = (l+r)>>1;
            if (nums[mid]<target) l=mid+1;
            else r=mid;
        }
        
        if (l>r || nums[l] != target)  return {-1,-1};
        if (nums[l]==target) range.push_back(l); 
        
        r=len-1;
        while(l<r) {
            int mid = (l+r)>>1;
            if (nums[mid]>target) r=mid;
            else l=mid+1;
        }
        
        r = nums[r]==target ? r : r-1;
        //target should alwasy be found here
        range.push_back(r);
        
        return range;
    }
};
