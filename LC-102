102. Binary Tree Level Order Traversal
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
 Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7



return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */


// recursive, 
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> levels;
        
        if (root) 
            levelOrderRecursive(root,levels,0);
            
        return levels;
    }
    
    void levelOrderRecursive(TreeNode *node, vector<vector<int>>& levels, int level) {
        if (levels.size() < level+1) 
            levels.push_back(vector<int>(1,node->val));
        else 
            levels[level].push_back(node->val);
        
        if (node->left)  levelOrderRecursive(node->left,levels,level+1);
        if (node->right) levelOrderRecursive(node->right,levels,level+1);
        
    }
};

// iterative
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> levels;
        vector<int>  line;
        queue<TreeNode *> q;
        
        if (root==NULL) return levels;
        
        q.push(root);
        int cur = 1, next = 0;
        while (!q.empty())
        {
            while (cur) {
                TreeNode *n = q.front();
                q.pop();
                -- cur;
                    
                line.push_back(n->val);
                if (n->left) {
                    q.push(n->left);
                    ++ next;
                }
                if (n->right) {
                    q.push(n->right);
                    ++ next;
                }
            }
            
            levels.push_back(line);
            line.clear();
            cur = next;
            next = 0;
        }
        
        return levels;
    }
};
