//78. Subsets

Given a set of distinct integers, nums, return all possible subsets.

Note:
Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

class Solution {
public:
    vector<vector<int>> output;
    vector<int> line;
    
    vector<vector<int>> subsets(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        output.push_back(line);
        subsetsSub(nums,0);
        
        return output;
    }
    
    void subsetsSub(vector<int>& nums, int index) {
        if (index>nums.size()-1) return;
        
        for (int i=index; i<nums.size(); ++i) {
            line.push_back(nums[i]);
            output.push_back(line);
            subsetsSub(nums,i+1);
            line.pop_back();
        }
    }
};

// good math:), copied from discussion
class Solution {
public:

    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> r;
        sort(nums.begin(), nums.end());
        auto n = int(pow(2, nums.size()));

        for (auto i = 0; i < n; ++i) {
            vector<int> subset;
            auto x = i, j = 0;

            while (x) {
                if (x & 1) subset.push_back(nums[j]);
                ++j;
                x >>= 1;
            }
            r.push_back(subset);
        }
        return r;
    }
};




