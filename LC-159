// 159 Longest Substring with At Most Two Distinct Characters
Given a string, find the length of the longest substring T that contains at most 2 distinct characters.

For example, Given s = “eceba”,

T is "ece" which its length is 3.



// copied from discussion

// 0. using a idx_start to remember the current start
// 1. using a map<char, int> cand remember how many times char occurs
// 2. once the map has more than two elements.  
// 3. then move the idx_start and minus the count in map and then calculate the len
int lengthOfLongestSubstringTwoDistinct(string s) {
    const int size_s = s.size();
    unordered_map<char, int> cand;
    int idx_start = 0, long_len = 0;
    for (int i = 0; i < size_s; i++) {
        cand[s[i]]++;
        while (cand.size() > 2) {
            if (--cand[s[idx_start]] == 0) cand.erase(s[idx_start]);
            idx_start++;
        }
        long_len = max(long_len, i - idx_start + 1);
    }
    return long_len;
}


// My method, untested
int lengthOfLongestSubstringTwoDistinct(string s) {
    int n=s.size(), first=0, second=n,longest=0;
    
    int index=1;
    while(index<n && s[index] == s[index-1]) ++index;
    if (index==n-1) return n;
    second = index;
    while (index<n) {
      if (s[index]==s[first] || s[index]==s[second]) {
        ++index;
      } else {
      // s[i] is the thir char
        longest=max(longest,i-first+1);
        int j=i-1;
        while (j>=first && s[j]==s[i-1]) --j;
        first = j+1;
        second=i;
      }
    }
    return max(longest, index-first+1);
}
