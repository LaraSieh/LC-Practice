238. Product of Array Except Self
Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].
Follow up:
Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)


class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> product(n,1);
        
        for (int i=1; i<n; ++i) {
            product[i] = product[i-1]*nums[i-1];
        }
        int second = nums[n-1];
        for (int i=n-2; i>=0; --i) {
            product[i] *= second;
            second *= nums[i];
        }
        return product;
    }
};


// copied from discussion
vector<int> productExceptSelf(vector<int>& nums) {
        int n=nums.size();
        vector<int> ans;
        ans.push_back(1);
        if(n<=1)
        return nums;

        for(int i=1;i<n;i++)
        {
           ans.push_back(ans[i-1]*nums[i-1]); 
        }

        for(int i=n-2;i>=0;i--)
        {
            nums[i]=nums[i]*nums[i+1];
            ans[i]=ans[i]*nums[i+1];
        }

        return ans;
}


