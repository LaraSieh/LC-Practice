331. Verify Preorder Serialization of a Binary Tree
One way to serialize a binary tree is to use pre-order traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as #.

     _9_
    /   \
   3     2
  / \   / \
 4   1  #  6
/ \ / \   / \
# # # #   # #
For example, the above binary tree can be serialized to the string "9,3,4,#,#,1,#,#,2,#,6,#,#", where # represents a null node.

Given a string of comma separated values, verify whether it is a correct preorder traversal serialization of a binary tree. Find an algorithm without reconstructing the tree.

Each comma separated value in the string must be either an integer or a character '#' representing null pointer.

You may assume that the input format is always valid, for example it could never contain two consecutive commas such as "1,,3".

Example 1:
"9,3,4,#,#,1,#,#,2,#,6,#,#"
Return true

Example 2:
"1,#"
Return false

Example 3:
"9,#,#,1"
Return false

// This solution is based on this Theorem
Theorem 5.1 Full Binary Tree Theorem: The number of leaves in a non-empty full binary tree is 
one more than the number of internal nodes


class Solution {
public:
    bool isValidSerialization(string preorder) {
        int nodeCount=0, nullCount=0;
        
        vector<string> working=split(preorder,',');
        for (int i=0; i<working.size(); ++i) {
            if (working[i]=="#") 
                ++nullCount;
            else 
                ++nodeCount;
            
            if ((nullCount>=nodeCount+1) && (i!=working.size()-1)) return false;
        }
        
        return nullCount==nodeCount+1;
    }
    
    vector<string> split(string orig, char delim) {
        vector<string> s;
        
        while (!orig.empty()) {
            int index = orig.find_first_of(delim);
            if (index != -1) {
                s.push_back(orig.substr(0,index));
                orig = orig.substr(index+1); 
            } else {
                s.push_back(orig);
                orig.clear();
            }
        }
        return s;
    }
};
