132. Palindrome Partitioning II
Given a string s, partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

For example, given s = "aab",
Return 1 since the palindrome partitioning ["aa","b"] could be produced using 1 cut.

// O(n^2) method
class Solution {
public:
    int minCut(string s) {
        const int n=s.size(); 
        if (n<2) return 0;
        
        vector<vector<bool>> isPal(n,vector<bool>(n,false));
        vector<int> counts(n+1,0);
        for (int i=0; i<=n; ++i) counts[i]=i-1;
                
        for (int i=0; i<n; ++i) {
            for (int j=i; j>=0;--j) {
                if (s[j]==s[i] && ((i<j+2) || isPal[j+1][i-1]))
                {
                    isPal[j][i] = true;
                    counts[i+1] = min(counts[i+1],counts[j]+1);
                }
            }
        }

        return counts[n];
    }
};


//Manancher-like solution, copied from discussion
// The Manancher-like solution scan the array from left to right (for i loop) and only check those sub-strings centered at s[i]; 
// once a non-palindrome string is found, it will stop and move to i+1. Same as the DP solution, minCUTS[i] is used to save the 
// minimum cuts for s[0:i-1]. For each i, we do two for loops (for j loop) to check 
// if the substrings s[i-j .. i+j] (odd-length substring) and s[i-j-1.. i+j] (even-length substring) are palindrome. 
// By increasing j from 0, we can find all the palindrome sub-strings centered at i and update minCUTS accordingly. 
// Once we meet one non-palindrome sub-string, we stop for-j loop since we know there no further palindrome substring centered at i. 
// This helps us avoid unnecessary palindrome substring checks, as we did in the DP algorithm. Therefore, this version is faster.
class Solution {
public:
    int minCut(string s) {
        const int n=s.size(); 
        if (n<2) return 0;
        
        int i,j,counts[n+1];
        for (int i=0;i<=n;++i) counts[i]=i-1;
        
        for (int i=0; i<n; ++i) {
            for (j=0;j<=i && j<(n-i) && s[i-j]==s[i+j];++j) { //odd-length
                counts[i+j+1]=min(counts[i+j+1],counts[i-j]+1);
            }
            for (j=0;j<=(i-1) && j<(n-i) && s[i-j-1]==s[i+j];++j) {
                counts[i+j+1]=min(counts[i+j+1],counts[i-j-1]+1);
            }
        }
        return counts[n];
    }
  };
