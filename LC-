LC-




1.assume that A and B are the two elements which we want to find;
2.use XOR for all elements,the result is : r = A^B,we just need to distinguish A from B next step;
3.if we can find a bit '1' in r,then the bit in corresponding position in A and B must be different.
   We can use {last = r & (~(r-1))} to get the last bit 1 int r;
4.we use last to divide all numbers into two groups,then A and B must fall into the two distrinct groups.
   XOR elements in eash group,get the A and B.
   
   class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        vector<int> ret;
        int x = 0;
        
        for (int i=0; i<nums.size(); ++i) {
            x = x ^ nums[i];
        }
        
        int diff = x & (~(x-1));
        int a = 0, b = 0;
        for (int i=0; i<nums.size(); ++i) {
            if (diff&nums[i]) {
                a = a ^ nums[i];
            } else  {
                b = b ^ nums[i];
            }
        }
        
        ret.push_back(a);
        ret.push_back(b);
        return ret;

    }
};
