// Distinct Subsequences
//Given a string S and a string T, count the number of distinct subsequences of T in S. 

//A subsequence of a string is a new string which is formed from the original string by deleting 
//some (can be none) of the characters without disturbing the relative positions of the remaining characters. 
//(ie, "ACE" is a subsequence of "ABCDE" while "AEC" is not). 

//Here is an example:
//S = "rabbbit", T = "rabbit" 
//Return 3. 

//DP solution
//a dynamic programming problem. Let's first define its state dp[i][j] to be the number of 
//distinct subsequences of t[0..i - 1] in s[0..j - 1]. Then we have the following state equations:
//1.General case 1: dp[i][j] = dp[i][j - 1] if t[i - 1] != s[j - 1];
//2.General case 2: dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1] if t[i - 1] == s[j - 1];
//3.Boundary case 1: dp[0][j] = 1 for all j;
//4.Boundary case 2: dp[i][0] = 0 for all positive i.

//Now let's give brief explanations to the four equations above.
//1.If t[i - 1] != s[j - 1], the distinct subsequences will not include s[j - 1] and thus all the number of distinct subsequences will simply be those in s[0..j - 2], which corresponds to dp[i][j - 1];
//2.If t[i - 1] == s[j - 1], the number of distinct subsequences include two parts: those with s[j - 1] and those without;
//3.An empty string will have exactly one subsequence in any string :-)
//4.Non-empty string will have no subsequences in an empty string.

int numDistinct(string s, string t) {
        size_t tlen = t.length(), slen = s.length();
        
        vector<vector<int>> dp(tlen + 1, vector<int> (slen + 1, 0));
        for (size_t j = 0; j < slen+1; j++) dp[0][j] = 1;
        for (size_t j = 1; j < slen+1; j++)
            for (size_t i = 1; i <= tlen; i++)
                dp[i][j] = dp[i][j - 1] + (t[i - 1] == s[j - 1] ? dp[i - 1][j - 1] : 0);
        return dp[tlen][slen];
}
        
// To simplify
//  Notice that we keep the whole m*n matrix simply for dp[i-1][j-1]. So we can store that value 
// in a single variable and further optimize the space complexity. 
int numDistinct(string s, string t) {
        int tlen = t.length(), slen = s.length();
        vector<int> cur(tlen + 1, 0);
        cur[0] = 1;
        for (int j = 1; j <= slen; j++) { 
            int prev = 1;  // <== dp[0][j]
            for (int i = 1; i <= tlen; i++) {
                int temp = cur[i];
                cur[i] = cur[i] + (t[i - 1] == s[j - 1] ? prev : 0);
                prev = temp;
            }
        }
        return cur[tlen];
    }


// recursive, but runs with time limit exceeded so not fully tested
class Solution {
public:
    int numDistinctWorker(string& s, string& t, size_t slen, size_t tlen, size_t si, size_t ti) {
        int num = 0;
        
        if (ti == tlen) return 1;
        if (slen-si < tlen-ti) return 0;
        
        for (size_t i=si; i<slen-(tlen-ti); ++i) {
            if (s[i] == t[ti]) {
                num += numDistinctWorker(s,t,slen,tlen,i+1,ti+1);
            }
        }
        return num;
    }
    
    int numDistinct(string s, string t) {
        numDistinctWorker(s,t,s.size(), t.size(),0,0);
    }
};
