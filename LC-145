// Binary Tree Postorder Traversal
// Given a binary tree, return the postorder traversal of its nodes' values.
//For example:
// Given binary tree {1,#,2,3},

//   1
//    \
//     2
//    /
//   3

// return [3,2,1]. 
// Note: Recursive solution is trivial, could you do it iteratively?

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        vector<int> ret;
        if(root==nullptr) return ret;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty())
        {
            TreeNode *cur=s.top();
            s.pop();
            if(cur->left)  s.push(cur->left);
            if(cur->right) s.push(cur->right);
            ret.push_back(cur->val);
        }
        reverse(ret.begin(),ret.end());
        return ret;

    }
};


//Recursive method

void postorderWorker(TreeNode *t, vector<int>& ret) {
        if (t == NULL) return;
        
        if (t->left) {
            postorderWorker(t->left, ret);
        } 
        if (t->right) {
            postorderWorker(t->right, ret);
        } 
        
        ret.push_back(t->val);
    }
    
    vector<int> postorderTraversal(TreeNode* root) {
            vector<int> ret;
   
        postorderWorker(root, ret);
        return ret;
    }
