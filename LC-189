189. Rotate Array
 Rotate an array of n elements to the right by k steps.

For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4]. 

Note:
 Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem. 

[show hint]

Hint:
 Could you do it in-place with O(1) extra space? 
 
 
 // straightforward way, O(n) space 24ms 
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        k = k%n;
        
        for (int i=0; i<n-k; ++i) {
            nums.push_back(nums[i]);
        }
        nums.erase(nums.begin(),nums.begin()+n-k);
    }
};

//in place
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        int n = nums.size();
        
        // loop will not change the order
        if ((k = k % n) == 0) return;  
        
        Reverse(nums, 0, n-k-1);
        Reverse(nums, n-k, n-1);
        Reverse(nums, 0, n-1);
    }
    
    void Reverse(vector<int>& nums, int start, int end)
    {
        while (start < end)
        {
            int tmp = nums[start];
            nums[start] = nums[end];
            nums[end] = tmp;
            ++ start;
            -- end;
        }
    }
};


// in C, 24ms
void Reverse(int *nums,int start, int end)
{
    while(start < end)
    {
        int tmp = *(nums+start);
        *(nums+start) = *(nums+end);
        *(nums+end) = tmp;
        ++start;
        --end;
    }
}

void rotate(int* nums, int numsSize, int k) {
    
    if ((k = k%numsSize) == 0) return;
    
    Reverse(nums,0,numsSize-k-1);
    Reverse(nums,numsSize-k,numsSize-1);
    Reverse(nums,0,numsSize-1);
}
