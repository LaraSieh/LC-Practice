#Longest Increasing Subsequence

Given an unsorted array of integers, find the length of longest increasing subsequence.

For example,
Given [10, 9, 2, 5, 3, 7, 101, 18],
The longest increasing subsequence is [2, 3, 7, 101], therefore the length is 4. Note that there may be more than one LIS combination, it is only necessary for you to return the length.

Your algorithm should run in O(n2) complexity.

Follow up: Could you improve it to O(n log n) time complexity?


class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size(), ret=1;
        
        if (n == 0) return 0;
        
        vector<int> longest(n,1);
        
        for (int i=n-1; i>=0; --i) {
            for (int j=i+1;j<n;++j) {
                if (nums[i] < nums[j]) {
                    longest[i] = max(longest[j]+1, longest[i]);
                }
            }
            ret = max(ret,longest[i]);
        }
        
        return ret;
    }
};


//  Onlog(n),  algorith explained here http://www.algorithmist.com/index.php/Longest_Increasing_Subsequence
class Solution {
public:
    int lengthOfLIS(vector<int>& nums) {
        const int len = nums.size();
        if(len < 2)  return len;
        
        vector<int> A(len+1,0);
        int ret = 1;
        
        A[1] = nums[0];
        for(int i = 1; i < len; i++){
            int temp = biSearch(A,ret,nums[i]);
            A[temp] = nums[i];
            if(ret < temp)  ret = temp;
        }
        return ret;
    }

    int biSearch(vector<int>& A, int n, int target){  // to find the right bound
        int left = 1, right = n;
        while(left <= right){
            int mid = (left + right)/2;
            if(A[mid] > target)
                right = mid - 1;
            else if(A[mid] < target)
                left = mid + 1;
            else 
                return mid;
        }
        return left;   
    }    
};   
