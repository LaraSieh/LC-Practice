80. Remove Duplicates from Sorted Array II
Follow up for "Remove Duplicates":
What if duplicates are allowed at most twice?

For example,
Given sorted array nums = [1,1,1,2,2,3],

Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3. It doesn't matter what you leave beyond the new length.

// 18ms
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n=nums.size();
        if (n==0) return 0;
        
        int cur=nums[0], count=1, dup=1;
        for (int i=1; i<n; ++i) {
            if (nums[i] !=nums[i-1] || (dup==1)) {
                dup = (nums[i]!=nums[i-1]) ? 1 : 2;
                nums[count++] = nums[i];
            } //once dup is > 2, don't have to add it up
        }
        return count;
    }
};

// 16ms
lass Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.size() == 0) return 0;
        
        int index=1, dup=1, cur=nums[0];
        
        for (int i=1; i<nums.size(); ++i) {
            if (nums[i] != cur) {
                cur = nums[i];
                dup = 1;
                nums[index++] = nums[i];
            } else if (dup != 2) {
                ++ dup;
                nums[index++] = nums[i];
            }   
        }
        return index;
    }
};
