// Merge Intervals
// Given a collection of intervals, merge all overlapping intervals.

//For example,
// Given [1,3],[2,6],[8,10],[15,18],
// return [1,6],[8,10],[15,18]. 

// method 1
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> ret;
        
        if (intervals.size() == 0) return ret;
        sort(intervals.begin(), intervals.end(),
        [](const Interval& a, const Interval& b) {
           return a.start < b.start; 
        });
        
        ret.push_back(intervals[0]);
        for (size_t i=0; i<intervals.size(); ++i) {
            if (ret.back().end < intervals[i].start) {// no overlap 
                ret.push_back(intervals[i]);
            } else { 
                ret.back().end = max(ret.back().end, intervals[i].end);
            }
        }
        return ret;
    }
    
    //method 2
    vector<Interval> merge(vector<Interval>& intervals) {
        vector<Interval> ret(intervals);
        if (ret.size() == 0) return ret;
        
        sort(ret.begin(), ret.end(), 
        [](const Interval& a, const Interval& b)
        {
           return (a.start < b.start); 
        });
        
        int cur = 0;
        for (size_t i=1; i<ret.size(); ++i) {
            if (ret[cur].end < ret[i].start) {
                ret[++cur] = ret[i];
            } else { 
                ret[cur].end = max(ret[cur].end, ret[i].end);
            }
        }
        // resize to cut redundants
        ret.resize(cur+1);
        return ret;
    }
