160. Intersection of Two Linked Lists
 Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists: 
A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3


begin to intersect at node c1.


Notes: 
•If the two linked lists have no intersection at all, return null.
•The linked lists must retain their original structure after the function returns. 
•You may assume there are no cycles anywhere in the entire linked structure.
•Your code should preferably run in O(n) time and use only O(1) memory.


// My not so clean solution, 52ms
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA==NULL || headB==NULL) return NULL;
        
        int l1=1,l2=1;
        ListNode *node1=headA;
        while (node1->next) {
            ++l1;
            node1 = node1->next;
        }
        ListNode *node2 = headB;
        while (node2->next) {
            ++l2;
            node2 = node2->next;
        }
        if (node1 != node2) return NULL; //tail doesn't match
        
        // they interact as the tail is the same
        int l= l2 > l1 ? (l2-l1) : (l1-l2) ;
        node1 = headA;
        node2 = headB;
        
        if (l2 > l1) {
            while(l--) node2=node2->next;
        } else {
            while(l--) node1=node1->next;
        }
        while (node1) {
            if (node1 == node2) return node1;
            node1 = node1->next;
            node2 = node2->next;
        }
        return node1;
    }
};

// copied from discussion, clean solution 48ms
We set 2 pointers "curA" and "curB" to point to linked-list headA and headB. Then set the 

     [#length of linked-list headA]=L1

     [#length of linked-list headB]=L2

     assuming that L1<L2

so, the curA will first move the tail of the headA, we have moved step T=L1

by setting the curA to headB we move the curA and the curB at the same time

       [#distance-from-curB-to-tail]=L2-L1

when we move the curB to the tail of the headB then we set the curB to the headA, at the same time, 

        [#distance-from-headB-to-curA]=L2-L1

So we have the

        [#distance-from-curB-to-meet-point] ==  [#distance-from-curA-to-meet-point]

We just move the curA and curB at the same time, then we get the meeting point .

The only corner cases happen when the 2 linked-list do not meet, so we need to return NULL once the 

      curA==NULL and curB==NULL before to change the curA and curB

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if (headA==NULL || headB==NULL) return NULL;
        ListNode *na=headA, *nb=headB;
        
        while (na && nb) {
            if (na == nb) return na;
            na = na->next;
            nb = nb->next;
            if (na==NULL && nb == NULL) return NULL;
            if (na==NULL) na = headB;
            if (nb==NULL) nb = headA;
        }
        
        return NULL;
    }
};
