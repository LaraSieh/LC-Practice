144. Binary Tree Preorder Traversal
Given a binary tree, return the preorder traversal of its nodes' values.

For example:
 Given binary tree {1,#,2,3},

   1
    \
     2
    /
   3



return [1,2,3]. 

Note: Recursive solution is trivial, could you do it iteratively?


// As usually, first recurisve
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> output;
        
        if (root == NULL) return output;
        preorder(root,output);
    }
    
    void preorder(TreeNode *node, vector<int>& output) {
        output.push_back(node->val);
        if (node->left) preorder(node->left,output);
        if (node->right) preorder(node->right,output);
    }
};


class Solution {
public:
    vector<int> res;
    
    vector<int> preorderTraversal(TreeNode* root) {
        if (root) {
            res.push_back(root->val);
            preorderTraversal(root->left);
            preorderTraversal(root->right);
        }
        
        return res;
    }
};

// iterative
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> preorder;
        if (root==nullptr) return preorder;
        
        stack<TreeNode *> s;
        s.push(root); 
        while (!s.empty()) {
            TreeNode *node = s.top();
            s.pop();
            
            preorder.push_back(node->val);
            if (node->right) s.push(node->right);
            if (node->left)  s.push(node->left);
        }
        return preorder;
    }
};

