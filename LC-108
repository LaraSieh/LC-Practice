108. Convert Sorted Array to Binary Search Tree
 Given an array where elements are sorted in ascending order, convert it to a height balanced BST.
 
 /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        if (nums.empty()) return nullptr;
        return sortedArrayToBSTRecursive(nums,0,nums.size()-1);
    }
    
    TreeNode *sortedArrayToBSTRecursive(vector<int>& nums, int left, int right) {
        int mid = left+(right-left)/2;
        TreeNode *node=new TreeNode(nums[mid]);
        if (left<mid) node->left = sortedArrayToBSTRecursive(nums,left,mid-1);
        if (right>mid) node->right = sortedArrayToBSTRecursive(nums,mid+1,right);
            
        return node;
    }

};


class Solution {
public:
    TreeNode* sortedArrayToBST(vector<int>& nums) {
        return sortedArrayToBSTRecursive(nums,0,nums.size()-1);
    }
    
    TreeNode *sortedArrayToBSTRecursive(vector<int>& nums, int left, int right) {
        if (left>right) return nullptr;
        
        int mid = left+(right-left)/2;
        TreeNode *node=new TreeNode(nums[mid]);
        node->left = sortedArrayToBSTRecursive(nums,left,mid-1);
        node->right = sortedArrayToBSTRecursive(nums,mid+1,right);
        
        return node;
    }
