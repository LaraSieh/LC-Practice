321. Create Maximum Number
Given two arrays of length m and n with digits 0-9 representing two numbers. Create the maximum number of length k <= m + n from digits of the two. The relative order of the digits from the same array must be preserved. Return an array of the k digits. You should try to optimize your time and space complexity.

Example 1:
nums1 = [3, 4, 6, 5]
nums2 = [9, 1, 2, 5, 8, 3]
k = 5
return [9, 8, 6, 5, 3]

Example 2:
nums1 = [6, 7]
nums2 = [6, 0, 4]
k = 5
return [6, 7, 6, 0, 4]

Example 3:
nums1 = [3, 9]
nums2 = [8, 9]
k = 3
return [9, 8, 9]


// copied from discussion
class Solution {
public:
    vector<int> maxNumber(vector<int>& nums1, vector<int>& nums2, int k) {
        int l1=nums1.size(), l2=nums2.size();
        vector<int> ret(k,0);
        
        for (int i=max(0,k-l2);i<=min(l1,k);++i) {
            vector<int> r1=findMax(nums1,i,l1);
            vector<int> r2=findMax(nums2,k-i,l2);
            vector<int> m=merge(r1,r2);
            if (compare(m,0,k,ret,0,k)) ret = m;
        }
        return ret;
    }
    
    vector<int> findMax(vector<int>& nums,int l,int n) {
        vector<int> ret;
        if (l==0) return ret;
        
        ret=vector<int>(l,0);
        for (int i=0,j=0;i<n;++i) { 
            // n-i - # of left digits
            // j is the current last digit position
            // n-i+j>l means the rest of the digits is more than filling
            // the positions after jth
            while(j>0&&n-i+j>l&&nums[i]>ret[j-1]) --j;
            if (j<l) ret[j++]=nums[i];
        }
        return ret;
    }
    
    vector<int> merge(vector<int>& n1, vector<int>& n2) {
        int l1=n1.size(), l2=n2.size();
        if (l1==0) return n2;
        if (l2==0) return n1;
        vector<int> ret(l1+l2,0);
        int i=0,j=0,k=0;
        while (i<l1 || j<l2) {
            ret[k++] = compare(n1,i,l1,n2,j,l2) ? n1[i++] : n2[j++];
        }
        return ret;
    }
    
    bool compare(vector<int>& n1,int i,int l1,vector<int>& n2,int j,int l2) {
        while(i<l1 && j<l2 && n1[i]==n2[j]) {
            ++i; ++j;
        }
        return j==l2 || (i<l1 && n1[i]>n2[j]);
    }
};
