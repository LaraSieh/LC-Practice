# 


// 224 ms
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> minTotal(amount+1,-1);
        sort(coins.begin(), coins.end());
        
        minTotal[0] = 0;
        for (int i=1;i<=amount;++i) {
            for (int j=0; j<coins.size(); ++j) {
                if (coins[j] > i) continue;
                int index = i - coins[j];
                if (minTotal[index] != -1) {
                    minTotal[i] = minTotal[i] == -1 ? minTotal[index]+1 : 
                        min(minTotal[index]+1, minTotal[i]);
                }
            }
        }
        
        return minTotal[amount];
    }
};


// 184 ms
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> minTotal(amount+1,-1);
        sort(coins.begin(), coins.end());
        
        minTotal[0] = 0;
        for (int i=1;i<=amount;++i) {
            for (int j=0; coins[j] <= i && j<coins.size(); ++j) {
                int index = i - coins[j];
                if (minTotal[index] != -1) {
                    minTotal[i] = minTotal[i] == -1 ? minTotal[index]+1 : 
                        min(minTotal[index]+1, minTotal[i]);
                }
            }
        }
        
        return minTotal[amount];
    }
};

// 160 ms
class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        vector<int> minTotal(amount+1,amount+1);
        sort(coins.begin(), coins.end());
        
        minTotal[0] = 0;
        for (int i=1;i<=amount;++i) {
            for (int j=0; coins[j] <= i && j<coins.size(); ++j) {
                minTotal[i] = min(minTotal[i-coins[j]]+1, minTotal[i]);
            }
        }
        
        return minTotal[amount] == amount+1 ? -1 : minTotal[amount];
    }
};

// copy from web
public int coinChange(int[] coins, int amount) {  
    int[] dp = new int[amount + 1];  
    for (int i = 1; i <= amount; i++) {  
        dp[i] = 0x7fffffff;  
        for (int j = 0; j < coins.length; j++)  
            if (i >= coins[j] && dp[i - coins[j]] != 0x7fffffff)  //â‘   
                dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);  
    }  
    return dp[amount] == 0x7fffffff ? -1 : dp[amount];  
}  


public int coinChange(int[] coins, int amount) {  
    int[] dp = new int[amount + 1];  
    for (int i = 1; i <= amount; i++) dp[i] = 0x7fff_fffe;  
    for (int coin : coins)  
        for (int i = coin; i <= amount; i++)  
            dp[i] = Math.min(dp[i], dp[i - coin] + 1);  
    return dp[amount] == 0x7fff_fffe ? -1 : dp[amount];  
}  
