245 Group Shifted Strings

Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:

"abc" -> "bcd" -> ... -> "xyz"
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.

For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], 
Return:

[
  ["abc","bcd","xyz"],
  ["az","ba"],
  ["acef"],
  ["a","z"]
]


//Copied from web, didn't run to test
class Solution {  
public:  
    vector<vector<string>> groupStrings(vector<string>& strings) {  
        unordered_map<string, vector<string>> d;  
        for(auto i : strings) {  
            string s = "";  
            for(auto j : i) {  
                s += to_string(((j - i[0]) + 26) % 26) + " ";  
            }  
            if(d.find(s) != d.end()) {  
                d[s].push_back(i);  
            } else {  
                vector<string> v;  
                v.push_back(i);  
                d.insert(pair<string, vector<string>>(s, v));  
            }  
        }  
          
        vector<vector<string>> result;  
        for(auto i = d.begin(); i != d.end(); i++) {  
            sort(i->second.begin(), i->second.end());  
            result.push_back(i->second);  
        }  
        return result;  
    }  
};  
