# Word Pattern

Given a pattern and a string str, find if str follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.

Examples:

1.pattern = "abba", str = "dog cat cat dog" should return true.
2.pattern = "abba", str = "dog cat cat fish" should return false.
3.pattern = "aaaa", str = "dog cat cat dog" should return false.
4.pattern = "abba", str = "dog dog dog dog" should return false.


Notes:
 You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space. 





class Solution {
public:
    bool wordPattern(string pattern, string str) {
        unordered_map<char, string> pattern2str;
        unordered_map<string, char> str2pattern;
        vector<string> vs;
        string s;
    
        for(auto c: str)
        {
            if(c != ' ') s += c;
            else {
                vs.push_back(s);
                s = "";
            }
        }
        vs.push_back(s);
        
        if(pattern.length() != vs.size())
            return false;

        for(int i = 0; i < pattern.length(); i++)
        { 
            auto iter1 = pattern2str.find(pattern[i]);
            auto iter2 = str2pattern.find(vs[i]);
            if(iter1 == pattern2str.end())
            {
                // didn't find it
                if(iter2 != str2pattern.end())
                    return false;
                else {
                    pattern2str[pattern[i]] = vs[i];
                    str2pattern[vs[i]] = pattern[i];
                }
            } else if(iter1->second != vs[i]) {
                return false;
            }
        }
    
        return true;
    }
};
