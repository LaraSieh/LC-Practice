150. Evaluate Reverse Polish Notation
Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are +, -, *, /. Each operand may be an integer or another expression.

Some examples:
  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9
  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6
  
  // My first round
  class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> ops;
        
        for (auto s : tokens) {
            int c = s[0];
            if ((c=='+' || c=='-' || c=='*' || c=='/') && s.size()==1) {
                int o2 = ops.top();
                ops.pop();
                int o1 = ops.top(); 
                ops.pop();
                
                int o = calculate(o1,o2,c);
                ops.push(o);
            } else {
                string s1;
                int sign = 1;
                if (c =='-') {
                    sign = -1;
                    s1 = s.substr(1);
                } else if (c=='+') {
                    s1 = s.substr(1);
                } else {
                    s1 = s;
                }

                ops.push(stoi(s1)*sign);
            }
        }
        
        return ops.top();
    }
    
    int calculate(int o1, int o2, char op) {
        switch(op) {
            case '+':
                return (o1+o2);
            case '-':
                return (o1-o2);
            case '*':
                return (o1*o2);
            case '/':
                return (o1/o2);
        }
        
        return 0;
    }
};
