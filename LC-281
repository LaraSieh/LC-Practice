Zigzag Iterator

Given two 1d vectors, implement an iterator to return their elements alternately.

For example, given two 1d vectors:

v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?


//copied from web
class ZigzagIterator {
  private:
      vector<int> &mv1, &mv2;
      vector<int>::iterator it1, it2, it;
  public:
      ZigzagIterator(vector<int>& v1, vector<int>& v2) : mv1(v1), mv2(v2) {
          it1 = v1.begin();
          it2 = v2.begin();
          it = (it1 == mv1.end()) ? it2 : it1;
     }
 
     int next() {
         int val = *it;
         if (it == it1) {
             ++it1;
             it = (it2 == mv2.end()) ? it1 : it2;
         } else {
             ++it2;
             it = (it1 == mv1.end()) ? it2 : it1;
         }
         return val;
     }
 
     bool hasNext() {
         return it1 != mv1.end() || it2 != mv2.end();
     }
 };


// for k 
class ZigzagIterator {
private:
    vector<vector<int>> bases;
    vector<int> curPosition;
public:

// NOT tested!!  need modify constructor to make it work
    ZigzagIterator(vector<int>& v1, vector<int>& v2) {
        bases.push_back(v1);
        bases.push_back(v2);
        curPosition.push_back(0);
        curPosition.push_back(0);
    }

    int next() {
        int maxIndex = 0;
        for(int index = 0; index < curPosition.size(); index++){
            if(curPosition[index] >= curPosition[maxIndex])
                maxIndex = index;
        }

        if(++maxIndex == curPosition.size())
            maxIndex = 0;

        for(; maxIndex < curPosition.size(); maxIndex++){
            if(curPosition[maxIndex] < bases[maxIndex].size())
                break;
        }

         if(maxIndex == curPosition.size())
            maxIndex = 0;

        curPosition[maxIndex]++;
        return bases[maxIndex][curPosition[maxIndex] - 1];
    }

    bool hasNext() {
        for(int index = 0; index < curPosition.size(); index++){
            if(curPosition[index] < bases[index].size())
                return true;
        }
        return false;
    }
};
