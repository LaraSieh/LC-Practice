
Range Sum Query - Mutable My Submissions Question
Total Accepted: 2704 Total Submissions: 17696 Difficulty: Medium
Given an integer array nums, find the sum of the elements between indices i and j (i â‰¤ j), inclusive.

The update(i, val) function modifies nums by updating the element at index i to val.
Example:
Given nums = [1, 3, 5]

sumRange(0, 2) -> 9
update(1, 2)
sumRange(0, 2) -> 8
Note:
The array is only modifiable by the update function.
You may assume the number of calls to update and sumRange function is distributed evenly.


//Segment tree, working passed time limit
class NumArray
{
    struct SegTreeNode {
        int sum, start, end;
        SegTreeNode *left;
        SegTreeNode *right;
        
        SegTreeNode(int s, int e) : sum(0), start(s), end(e), left(NULL), right(NULL) {}
    };

public:
    NumArray(vector<int> &nums) {
        if (nums.size() == 0) {
            return;
        }
        root = buildTree(nums, 0, nums.size()-1);
    }

    void update(int i, int val) {
        update(root, i, val);
    }

    int sumRange(int i, int j) {
        return sumRange(root, i, j);
    }
    
private:
    int sumRange(SegTreeNode *node, int s, int e) {
        if ((node->start == s && node->end == e) || (node->start == node->end)) {
            return node->sum;
        }
        
        int mid = node->start + (node->end - node->start) / 2;
        if (e <= mid) {
            return sumRange(node->left, s, e);
        } else if (s > mid) { 
            return sumRange(node->right, s, e);
        } else {
            return sumRange(node->left,s,mid) + sumRange(node->right,mid+1,e);
        }
    }

    SegTreeNode *buildTree(vector<int>& nums, int s, int e) {
        SegTreeNode *seg = new SegTreeNode(s,e);
        if (s==e) {
            seg->sum = nums[s];
            return seg;
        }
        
        int mid = s + (e-s)/2;
        seg->left = buildTree(nums,s,mid);
        seg->right = buildTree(nums,mid+1,e);
        seg->sum = seg->left->sum + seg->right->sum;
    }
    
    void update(SegTreeNode *node, int i, int val) {
        if (node->start == node->end) {
            node->sum = val;
            return;
        } 
        int mid = node->start + (node->end - node->start) / 2;
        if (i <= mid) {
            update(node->left, i, val);
        } else {
            update(node->right, i, val);
        }
        node->sum = node->left->sum + node->right->sum;
    }
    
private:
    SegTreeNode *root;
};


// Your NumArray object will be instantiated and called as such:
// NumArray numArray(nums);
// numArray.sumRange(0, 1);
// numArray.update(1, 10);
// numArray.sumRange(1, 2);





// This one won't pass tests as it's too slow (exceeds time limit), but it's straightforward
class NumArray {
public:
    NumArray(vector<int> &nums) {
        int s=0;
        sums.push_back(s);
        for (size_t i=0; i<nums.size(); ++i) {
            sums.push_back(s);
        }
        
    }
    void update(int i, int val) {
        int delta = val - (sums[i+1]-sums[i]);
        for (size_t index=i; index < sums.size(); ++index) {
            sums[index] += delta;
        }
    }

    int sumRange(int i, int j) {
        return (sums[j+1] - sums[i]);
    }
    
private:
    vector<int> sums;
};
