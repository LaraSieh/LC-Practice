234. Palindrome Linked List
Given a singly linked list, determine if it is a palindrome.
Follow up:
Could you do it in O(n) time and O(1) space?


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
 // O(n) time, O(1) space
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head==NULL || head->next==NULL) return true; 
        ListNode *one=head, *two=head;
        
        while (two && two->next) {
            two = two->next->next;
            one = one->next;
        }
        // odd, one is the middle point
        // even, one is second of the two middle point
        
        //revert the second half of the linked list
        two = NULL; // two serves as prev
        while (one) {
            ListNode *save = one->next;
            one->next = two;
            two = one;
            one = save;
        }  
        //comparing list starting with two with head
        while (two) {
            if (two->val != head->val) return false;
            two = two->next;
            head= head->next;
        }
        return  true;
    }
};
