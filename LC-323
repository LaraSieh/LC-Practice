323	Number of Connected Components in an Undirected Graph

Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to find the number of connected components in an undirected graph.
Example 1:
     0          3
     |          |
     1 --- 2    4
Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], return 2.

Example 2:
     0           4
     |           |
     1 --- 2 --- 3
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [3, 4]], return 1.

Note:
You can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.


class Solution {
public:
    int countComponents(int n, vector<pair<int, int>>& edges) {
        int count = 0;
        vector<bool> visited(n);
        vector<vector<int>> graph(n);

        if (n==0) return 0;

        for(auto& edge : edges){
            graph[edge.first].push_back(edge.second);
            graph[edge.second].push_back(edge.first);
        }

        for(int i=0; i<n; i++){
            if (!visited[i]){
                ++count;
                dfs(i, visited, graph);
            }
        }
        return cc;
    }

private:
    void dfs(int i, vector<bool>& visited, vector<vector<int>>& graph){
        if (visited[i]) return;
        visited[i] = true;
        for(int j=0; j<graph[i].size(); j++)
            dfs(graph[i][j], visited, graph);
    }
}
