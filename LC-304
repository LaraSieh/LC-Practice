//Range Sum Query 2D - Immutable 

// Given a 2D matrix matrix, find the sum of the elements inside the rectangle defined by its upper left corner (row1, col1) 
// and lower right corner (row2, col2).

// Range Sum Query 2D
//The above rectangle (with the red border) is defined by (row1, col1) = (2, 1) and (row2, col2) = (4, 3), 
//which contains sum = 8.

Example:
Given matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12
Note:
You may assume that the matrix does not change.
There are many calls to sumRegion function.
You may assume that row1 ≤ row2 and col1 ≤ col2.


class NumMatrix {
public:
    NumMatrix(vector<vector<int>> &matrix) {
        size_t rows = matrix.size();

        size_t cols = rows==0 ? 0 : matrix[0].size();
        sums = vector<vector<int>>(rows+1, vector<int>(cols+1,0));        
    
        for (size_t i=0; i<rows; ++i) {
            for (size_t j=0; j<cols; ++j) {
                sums[i+1][j+1] = sums[i][j+1]+sums[i+1][j]-sums[i][j]+matrix[i][j];
            }
        }
    }

    int sumRegion(int row1, int col1, int row2, int col2) {
        return (sums[row2+1][col2+1]-sums[row1][col2+1]-sums[row2+1][col1]+sums[row1][col1]);
    }
    
private:
    vector<vector<int>> sums;
};


// Your NumMatrix object will be instantiated and called as such:
// NumMatrix numMatrix(matrix);
// numMatrix.sumRegion(0, 1, 2, 3);
// numMatrix.sumRegion(1, 2, 3, 4);
