188. Best Time to Buy and Sell Stock IV
Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if (prices.empty()) return 0;
        int mProfit = 0;
        if (k>=prices.size()) {
            // same as unlimited transaction
            for (int i=1; i<prices.size(); ++i) {
                if (prices[i]-prices[i-1] > 0) {
                    mProfit += prices[i]-prices[i-1];
                }
            }
            return mProfit;
        }
        vector<int> local(k+1,0);
        vector<int> global(k+1,0);
        for (int i=0; i<prices.size()-1;++i) {
            int delta = prices[i+1]-prices[i];
            for (int j=k; j>=1; --j) {
                local[j] = max(global[j-1]+max(delta,0),local[j]+delta);
                global[j] = max(global[j],local[j]);
            }
        }
        return global[k];
        
    }
};
