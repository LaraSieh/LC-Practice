# Additive Number
Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

For example:
"112358" is an additive number because the digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8
"199100199" is also an additive number, the additive sequence is: 1, 99, 100, 199. 1 + 99 = 100, 99 + 100 = 199


Note: Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid. 

Given a string containing only digits '0'-'9', write a function to determine if it's an additive number.

Follow up:
 How would you handle overflow for very large input integers? 


class Solution {
public:
    bool isAdditiveNumber(string num) {
        int len = num.size();
        if (len < 3) return false;
    
        for (int i = 0; i < len-2; ++i) {
            for (int j = i+1; j < len-1; ++j) {
                // [i1,i2] is first number
                // [j1,j2] is second number                
                int i1 = 0, i2= i, j1 = i2+1, j2=j;
                if ((num[i1] == '0' && i1 != i2) || (num[j1]=='0' && j1!= j2)) {
                    continue;
                }

                while (i2 < num.size() && j2 < num.size()) {
                    // get the two numbers in the sequence
                    string s = addstrs(num, i1, i2, j1, j2);

                    if (s.size() <= num.substr(j2+1).size() &&
                        num.substr(j2+1).find(s) == 0) {
                        i1 = j1;
                        i2 = j2;
                        j1 = j2 + 1;
                        j2 = j1 + (s.size() - 1);
                        if (j2 == num.size()-1) {
                            return true;
                        }
                    } else {
                        break;
                    }
                        
                }
            }
        }
        return false;
    }
    
private:
    string addstrs(string str, int i1, int i2 , int j1, int j2) {
        string s1 = str.substr(i1,(i2-i1)+1);
        string s2 = str.substr(j1,(j2-j1)+1);
        unsigned long long n1 = stoull(s1);
        unsigned long long n2 = stoull(s2);
        return to_string(n1 + n2);
    };
};
