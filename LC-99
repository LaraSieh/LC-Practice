// Recover Binary Search Tree
// Two elements of a binary search tree (BST) are swapped by mistake.
// Recover the tree without changing its structure.

//Note:
//A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?
//confused what "{1,#,2,3}" means? > read more on how binary tree is serialized on OJ.


// this solution uses o(n) space.  However it works for any number of misplaced elements
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
        if (root == NULL) return;
        
        vector<int> vallist;
        vector<TreeNode *> nodelist;
        
        InOrderTraversal(root, nodelist, vallist);
        sort(vallist.begin(),vallist.end());
        for (size_t i=0; i<vallist.size(); ++i) {
            nodelist[i]->val = vallist[i];
        }
    }
    
    void InOrderTraversal(TreeNode *root, vector<TreeNode *>& nodes, vector<int>& vals) {
        
        if (root->left) 
            InOrderTraversal(root->left, nodes, vals);
        nodes.push_back(root);
        vals.push_back(root->val);
        if (root->right) 
            InOrderTraversal(root->right, nodes, vals);
    }    
};

// method 2  o(n) space.  It's a variation from iterative version of in-order traversal
// Note that, (1)the previous element is the previous element in the "inOrder" order; 
//            (2) To store the wrong pair, the first found wrong element is stored in first pointer, 
//               while the next is stored in the second pointer.
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void recoverTree(TreeNode* root) {
    TreeNode *f1=NULL, *f2=NULL;
    TreeNode  *current=root,*pre, *parent=NULL;

    bool found = false;
    while(current != NULL) {                 
        if(current->left == NULL) {
            if(parent && parent->val > current->val) {
                if(!found) {
                    f1 = parent;
                    found = true;
                }
                f2 = current;
            }
            parent = current;
            current = current->right;      
        } else {
            /* Find the inorder predecessor of current */
            pre = current->left;
            while(pre->right != NULL && pre->right != current)
                pre = pre->right;
                           
            /* Make current as right child of its inorder predecessor */
            if(pre->right == NULL) {
                pre->right = current;
                current = current->left;
            } else {
                /* Revert the changes made in if part to restore the original
                    tree i.e., fix the right child of predecssor */ 
                pre->right = NULL;

                if(parent->val > current->val) {
                    if(!found) {
                        f1 = parent;
                        found = true;
                    }
                    f2 = current;
                }
                
                parent = current;
                current = current->right;      
            } /* End of if condition pre->right == NULL */
        } /* End of if condition current->left == NULL*/
    } /* End of while */

    if(f1 && f2)
        swap(f1->val, f2->val);
    }
};

// recursive version, easier to understand.  But strictly speaking it is not o(1) due to stack space
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode *first;
    TreeNode *second;
    TreeNode *pre;
     
    void inOrder(TreeNode *root){
        if (root==NULL) return;
        
        inOrder(root->left);
        if (pre == NULL){
            pre = root;
        }
        else {
            if (pre->val > root->val){
                if (first==NULL) {
                    first = pre;
                }
                second = root;
            }
            pre = root;
        }
        inOrder(root->right);
    }
    void recoverTree(TreeNode *root) {
        pre = NULL;
        first = NULL;
        second= NULL;
        inOrder(root);
        int val;
        val = first->val;
        first->val=second->val;
        second->val=val;
        return;
    }
};
