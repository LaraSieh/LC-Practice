329. Longest Increasing Path in a Matrix
Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.

class Solution {
public:
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        int m=matrix.size();
        if (m==0) return 0;
        int n=matrix[0].size();
  
        int mPath = 0;
        vector<vector<int>> path(m, vector<int>(n,0)); //path records max path at [i,j]
        for (int i=0; i<m; ++i) {
            for (int j=0; j<n; ++j) {
                mPath = max(mPath, longest(matrix, path, i, j, m, n));
            }
        }
        
        return mPath;
    }
    
    int longest(vector<vector<int>>& matrix, vector<vector<int>>& path, int i, int j, int m, int n) {
        if (path[i][j] != 0) return path[i][j];
        
        int p = 0;
        if (i>0 && matrix[i][j] > matrix[i-1][j]) { //top
            p = max(p, longest(matrix,path,i-1,j,m,n));
        }
        
        if (i<m-1 && matrix[i][j] > matrix[i+1][j]) { //bottom
            p = max(p, longest(matrix,path,i+1,j,m,n));
        }
        
        if (j>0 && matrix[i][j] > matrix[i][j-1]) { //left
            p = max(p, longest(matrix,path,i,j-1,m,n));
        }
        
        if (j<n-1 && matrix[i][j] > matrix[i][j+1]) { //right
            p = max(p, longest(matrix,path,i,j+1,m,n));
        }
        
        path[i][j] = p+1;
        return p+1;
    }
};
