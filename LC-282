282. Expression Add Operators
Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Examples: 
"123", 6 -> ["1+2+3", "1*2*3"] 
"232", 8 -> ["2*3+2", "2+3*2"]
"105", 5 -> ["1*0+5","10-5"]
"00", 0 -> ["0+0", "0-0", "0*0"]
"3456237490", 9191 -> []

class Solution {
public:
    vector<string> addOperators(string num, int target) {
        vector<string> op;
        
        if (num.size()==0) return op;
        worker(op,"",num,target,0,0,0);
        return op;
    }
    
    void worker(vector<string>& op,string path,string& num,int target, int index, long cur, long prev) {
        if (index==num.size()) {
            if (cur==target) {
                op.push_back(path);
            }
            return;
        }
        for (int i=index;i<num.size();++i) {
            if (num[index]=='0' && i>index) break;
            string s = num.substr(index,i-index+1);
            long   v = stol(s);
            if (index==0) {
                worker(op,path+s,num,target,i+1,v,v);
            } else {
                worker(op,path+"+"+s,num,target,i+1,cur+v,v);
                worker(op,path+"-"+s,num,target,i+1,cur-v,-v);
                worker(op,path+"*"+s,num,target,i+1,cur-prev+prev*v,prev*v);
            }
        }
    }
};
