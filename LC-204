#204 Count Primes

// Count the number of prime numbers less than a non-negative number, n.

// straight forward way but slow...
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> isPrime(n,true);
        int i = 2;
        while (i*i < n)
        {
            for (int j=2; i*j < n; ++j)
            {
                isPrime[i*j] = false;
            }
            
            ++i;
        }
        int count = 0;
        for (int i = 2; i < n; ++i)
        {
            if (isPrime[i] == true)
                ++ count;
        }
        
        return count;
    }
};


// fast, copied from discussion
// Here notPrime[i] refer to the number a = 2* i + 1, so the marking process starts from a^2 which is 2i(i+1) back to index

// just count the odd number and skip all even numbers. 
// ignore 1 since I ignored 2 as well. (So do nothing with 1 and it will be correct)
// As for "m = (n + 1)/2, count = m":
// Well that is how many odd number candidate you have in total....I counted it by subtract the one the proof not prime.
// For "k = (i+ 1)2i; k < m;k += i*2 + 1"
// Well I explained that before: When I encounter prime number a, I marked all the numbers starting from aa with step 2a. 
// Remember here a is stored in i = (a-1)/2. So aa becomes (i+1)2i

class Solution {
public:
    int countPrimes(int n) {
        if(--n < 2) return 0;
        int m = (n + 1)/2, count = m, k, u = (sqrt(n) - 1)/2;
        bool notPrime[m] = {0};

        for(int i = 1; i <= u;i++) {
            if(!notPrime[i]) {
                for(k=(i+ 1)*2*i; k<m; k += i*2 + 1) {
                    if (!notPrime[k])
                    {
                        notPrime[k] = true;
                        count--;
                    }
                }
            }
        }
        return count;
    }   
};


// got from hint, 12ms!
class Solution {
public:
    int countPrimes(int n) {
        vector<bool> isPrime(n,true);
        
        for (int i=2; i*i<n; ++i) {
            if (!isPrime[i]) continue;
            for (int j=i*i; j<n; j+=i) 
                isPrime[j] = false;
        }
        int count=0;
        for (int i=2; i<n; ++i) {
            if (isPrime[i]) ++count;
        }
        return count;
    }
};
