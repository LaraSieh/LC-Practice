



297. Serialize and Deserialize Binary Tree
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following tree

    1
   / \
  2   3
     / \
    4   5
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.



// my first try, recursive preorder
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string output;
        
        serializeSub(root,output);
        return output;
    }

    void serializeSub(TreeNode *node, string& s) {
        if (node == nullptr) {
            s += "null,";
            return;
        }
        s += to_string(node->val) +',';
        serializeSub(node->left, s);
        serializeSub(node->right,s);
    }
    
    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        vector<string> s = split(data, ',');
        int  index = 0;
        
        return deserializeSub(s,index);
    }
    
    vector<string> split(string data, char delim) {
        vector<string> s;
        
        while (!data.empty()) {
            int index = data.find_first_of(delim);
            s.push_back(data.substr(0,index));
            data = data.substr(index+1);
        }
        
        return s;
    }
    
    TreeNode *deserializeSub(vector<string>& s, int& index) {
        if (s[index] == "null") {
            ++index;
            return nullptr;
        }
        int val = stoi(s[index++]);
        TreeNode *node = new TreeNode(val);
        node->left = deserializeSub(s,index);
        node->right = deserializeSub(s,index);
        
        return node;
    }
};
