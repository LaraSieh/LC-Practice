199. Binary Tree Right Side View
Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.

For example:
Given the following binary tree,
   1            <---
 /   \
2     3         <---
 \     \
  5     4       <---
You should return [1, 3, 4].

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> rightSideView(TreeNode* root) {
        if (root==nullptr) return vector<int>{};
        queue<TreeNode *> q;
        q.push(root); q.push(nullptr);
        
        vector<int> output;
        while (!q.empty()) {
            TreeNode *node;
            while (q.front() !=nullptr) {
                node = q.front();
                q.pop();
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
            
            // q.front() == nullptr, this level is done
            output.push_back(node->val);
            q.pop(); //pop up the nullptr;
            if (!q.empty())
                q.push(nullptr);  //push down nullptr for next level
             
        }
        
        return output;
    }
};


// using level to track
class Solution {
public:
    vector<int> res;
    
    vector<int> rightSideView(TreeNode* root) {
        if (root == NULL) return res;
        queue<TreeNode *> q;
        
        int level = 0;
        int loop = 1;
        q.push(root);
        while (loop) {
            TreeNode *t = q.front();
            q.pop();
            if (t->left) {
                q.push(t->left);
                ++level;
            }
            if (t->right) {
                q.push(t->right);
                ++level;
            }
            --loop;
             if (loop == 0) {
                res.push_back(t->val);
                loop = level;
                level = 0;
            }
        }
    
        return res;
    }
};
