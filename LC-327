327. Count of Range Sum
Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.
Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive.

Note:
A naive algorithm of O(n2) is trivial. You MUST do better than that.

Example:
Given nums = [-2, 5, -1], lower = -2, upper = 2,
Return 3.
The three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2.


// anyway first brute force, o(n^2) though time limit exceeds:)
class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n = nums.size();
        
        int count=0;
        for (int i=0; i<n; ++i) {
            int sum=0;
            for (int j=i; j<n; ++j) {
                sum += nums[j];
                if (sum>=lower && sum<=upper) {
                    ++count;
                }
            }
        }
        return count;
    }
};

327. Count of Range Sum
Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.
 Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i ≤ j), inclusive. 

Note:
 A naive algorithm of O(n2) is trivial. You MUST do better than that. 

Example:
 Given nums = [-2, 5, -1], lower = -2, upper = 2,
 Return 3.
 The three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2. 


//n^2 TLE method:)
class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n = nums.size(), count=0;
        vector<long> sums(n+1,0);
        for (int i=0;i<n;++i) {
            sums[i+1] = sums[i]+nums[i];
        }
        for (int i=0;i<n;++i) {
            for (int j=i+1;j<=n;++j) {
                int range = sums[j]-sums[i];
                if (range >= lower && range <= upper) ++count;
            }
        }
        return count;
    }
};


// copied from discussion, though don't understand yet :(
class Solution {
public:
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n = nums.size(), count=0;
        vector<long> sums(n+1,0);
        for (int i=0;i<n;++i) {
            sums[i+1] = sums[i]+nums[i];
        }
        
        return CountWhileMerge(sums,0,n+1,lower,upper);
    }
    
    int CountWhileMerge(vector<long>& sums,int start,int end,int lower,int upper) {
        if (end <= start+1) return 0;
        int mid = (start+end)/2;
        int count = CountWhileMerge(sums,start,mid,lower,upper)+CountWhileMerge(sums,mid,end,lower,upper);
        
        int m=mid,n=mid,l=mid,len=0;
        vector<long> cache(end-start,0);
        for (int i=start,j=0;i<mid;++i,++j) {
            while(m<end && sums[m]-sums[i]<lower) ++m;
            while (n<end && sums[n]-sums[i]<=upper) ++n;
            count += n-m;
            
            while(l<end && sums[l]<sums[i]) cache[j++]=sums[l++];
            cache[j]=sums[i];
            len = j;
        }
        
        for (int i=0; i<=len; ++i) sums[start+i]=cache[i];
        return count;
    }
};
