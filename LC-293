293 Flip game
You are playing the following Flip Game with your friend: Given a string that contains only these two characters: + and -, you and your friend take turns to flip two consecutive "++" into "--". The game ends when a person can no longer make a move and therefore the other person will be the winner.

Write a function to compute all possible states of the string after one valid move.

For example, given s = "++++", after one move, it may become one of the following states:

[
  "--++",
  "+--+",
  "++--"
]

class Solution {
public:
    vector<string> generatePossibleNextMoves(string s) {
        vector<string> moves;
        int n = s.length();
        for (int i = 0; i < n - 1; i++) {
            if (s[i] == '+' && s[i + 1] == '+') { 
                s[i] = s[i + 1] = '-';
                moves.push_back(s);
                s[i] = s[i + 1] = '+';
            }
        }
        return moves;
    }
};

// flip game 2??

// Flip game

// Problem Description:
// You are playing the following Flip Game with your friend: 
// Given a string that contains only these two characters: + and -, 
//you and your friend take turns to flip two consecutive "++" into "--". The game ends when a person can no longer 
// make a move and therefore the other person will be the winner.

// Write a function to determine if the starting player can guarantee a win.
// For example, given s = "++++", return true. The starting player can guarantee a win by flipping the middle "++" to become "+--+".

//The idea is very straightforward: if you can make s non-winnable by a move, then you will win.
// T(N) = T(N-2) + T(N-3) + [T(2) + T(N-4)] + [T(3) + T(N-5)] + ... 
//        [T(N-5) + T(3)] + [T(N-4) + T(2)] + T(N-3) + T(N-2)
//         = 2 * sum(T[i])  (i = 3..N-2)
// comlexity:  the time complexity: Suppose originally the board of size N contains only '+' signs, then roughly we have:
//
// You will find that T(N) = 2^(N-1) satisfies the above equation. Therefore, this algorithm is at least exponential.

class Solution {
  public:
    bool canWin(string s) {
         for (int i = -1; (i = s.find("++", i + 1)) >= 0; )
             if (!canWin(s.substr(0, i) + '-' + s.substr(i+2)))
                 return true;
         return false;
     }
 };


// another way
int len;
string orig;
bool canWin(string s) {
    len = s.size();
    orig = s;
    return canWin();
}
bool canWin() {
    for (int is = 0; is <= len-2; ++is) {
        if (orig[is] == '+' && ss[is+1] == '+') {
            orig[is] = '-'; orig[is+1] = '-';
            bool wins = !canWin(); 
            orig[is] = '+'; orig[is+1] = '+';
            if (wins) return true;
        }
    }
    return false;
} 


// From game theory,  supposedly it is zero ms
int firstMissingNumber(unordered_set<int> lut) {
    int m = lut.size();
    for (int i = 0; i < m; ++i) {
        if (lut.count(i) == 0) return i;
    }
    return m;
}

bool canWin(string s) {
    int curlen = 0, maxlen = 0;
    vector<int> board_init_state;
    for (int i = 0; i < s.size(); ++i) {    
        if (s[i] == '+') curlen++;              // Find the length of all continuous '+' signs
        if (i+1 == s.size() || s[i] == '-') {
            if (curlen >= 2) board_init_state.push_back(curlen);    // only length >= 2 counts
            maxlen = max(maxlen, curlen);       // Also get the maximum continuous length
            curlen = 0;
        }
    }          // For instance ++--+--++++-+ will be represented as (2, 4)
    vector<int> g(maxlen+1, 0);    // Sprague-Grundy function of 0 ~ maxlen
    for (int len = 2; len <= maxlen; ++len) {
        unordered_set<int> gsub;    // the S-G value of all subgame states
        for (int len_first_game = 0; len_first_game < len/2; ++len_first_game) {
            int len_second_game = len - len_first_game - 2;
            // Theorem 2: g[game] = g[subgame1]^g[subgame2]^g[subgame3]...;
            gsub.insert(g[len_first_game] ^ g[len_second_game]);
        }
        g[len] = firstMissingNumber(gsub);
    }

    int g_final = 0;
    for (auto& s: board_init_state) g_final ^= g[s];
    return g_final != 0;    // Theorem 1: First player must win iff g(current_state) != 0
 }
