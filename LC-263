# Ugly Number

// Write a program to check whether a given number is an ugly number. 
// Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 
// 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7. 
// Note that 1 is typically treated as an ugly number. 

// first write, 4ms
class Solution {
public:
    bool isUgly(int num) {
        if (num<= 0) return false;
        
        while ((num&0x1) == 0) num = num >> 1;
        if (num == 1) return true;  // this can improve time performance by half. //second time run, it doesn't matter
        
        while (num%3 == 0) num = num/3;
        if (num == 1) return true;
        
        while (num%5 == 0) num = num/5;
        
        return (num==1);
    }
};

// shorter code, slower 8ms
class Solution {
public:
    bool isUgly(int num) {
        if (num <= 0) return false;
        
        int ugly[] = {2, 3, 5};
        
        for (int i=0; i < sizeof(ugly)/sizeof(int); ++i ) {
            if (num==1) return true;
            while ((num % ugly[i]) == 0) num = num / ugly[i];
        }
        
        return num==1; 
    }
};
