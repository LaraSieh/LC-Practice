107. Binary Tree Level Order Traversal II
 Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
 Given binary tree {3,9,20,#,#,15,7},

    3
   / \
  9  20
    /  \
   15   7



return its bottom-up level order traversal as:

[
  [15,7],
  [9,20],
  [3]
]


// My usual queue method:) using NULL as a delimit for each level, 4ms
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        vector<vector<int>> levels;
        if (root==NULL) return levels;
        
        queue<TreeNode *> q;
        q.push(root);q.push(NULL);
        
        vector<int> level;
        while (!q.empty()) {
            TreeNode *node = q.front();
            q.pop();
            
            if (node==NULL) // done with one level
            {
                levels.push_back(level);
                level.clear();
                if (!q.empty()) q.push(NULL);
            } else {
                level.push_back(node->val);
                if (node->left) q.push(node->left);
                if (node->right) q.push(node->right);
            }
        }
        reverse(levels.begin(),levels.end());
        return levels;
    }
};

// using levels, copied from discussion.  8ms
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        if (!root) return (vector<vector<int>>());
        
        vector<pair<TreeNode*,int> > q;
        int lev=1;
        int count=0;
        q.push_back(make_pair(root,lev));
         
        while (count<q.size()){
            TreeNode *node = q[count].first;
            lev = q[count].second;
            if (node->left){ q.push_back(make_pair(node->left,lev+1));}
            if (node->right){ q.push_back(make_pair(node->right,lev+1));}
            count++;
        }
         
        vector<vector<int> > res(lev, vector<int>());
        for (int i=0;i<q.size();i++){
            res[lev-q[i].second].push_back(q[i].first->val);
        }
        return res;
    }
};
