110. Balanced Binary Tree
Given a binary tree, determine if it is height-balanced. 

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1. 


// my 12ms solution
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        int height=0;
        
        return isBalancedHeight(root,height);
    }
    
    bool isBalancedHeight(TreeNode *node, int &height) {
        if (node==NULL) {
            height = 0;
            return true;
        }
        int lh=0, rh=0;
        if (!isBalancedHeight(node->left,lh)) return false;
        if (!isBalancedHeight(node->right,rh)) return false;
        
        if (lh>rh+1 || lh<rh-1) return false;
        
        height = lh > rh ? lh+1 : rh+1;
        return true;
    }
};

// 16ms solution
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if (root==NULL) return true;
        
        if (isSubTreeBalanced(root) == -1)
            return false;
            
        return true;
    }
    
    int isSubTreeBalanced(TreeNode *node) {
        if (node == NULL)
            return 0;
        int l = isSubTreeBalanced(node->left);
        if (l == -1)
            return -1;
        int r = isSubTreeBalanced(node->right);
        if (r == -1)
            return -1;
            
        if (-1 <= (l-r) &&  (l-r) <= 1) 
            return l > r ? l+1 : r+1;
            
        return -1;
    }
    
};
